-------------------------Styling Forms-------------------------
General rules:
1) Browsers have its own default styling, so we have to override it.
2) Radio buttons and checkboxes are difficult to style. Date pickers are impossible.

Easy elements: form, fieldset, legend, input (single-line, except type='search'), textarea, buttons, label, output.
Bad elements: checkboxes, radio buttons, <input type="search">
Ugly elements: <input type="color | range | file">, select, option, optgroup, datalist, progress, meter.

Recommendations:
-font-
button, input, select, textarea{
	font-family:  inherit;
	font-size: 100%;
} 

button, input, select, textarea{
	width:  150px;
	padding:  10px;
	margin: 0px;
	box-sizing: border-box;
} 

----Form validation----

input:invalid{
	border-color: red;
}
input:valid{
	border-color: green;
}

--Other pseudo-classes--
:focus --> element gains focus
:focus-within --> child element gains focus
:required 
:optional --> not required attribute
:in-range
:out-of-range
:disabled
:enabled
:read-only --> a field with the 'read-only' attribute
:read-write: --> not read-only
:checked --> for checkboxes and radio buttons

--Pseudo-elements--
Warning, pseudo-classes and pseudo-elements have the same specificity!

input[type="email"]::placeholder{color: blue}


---------------------------------------SVGs---------------------------------------


SVG (Scalable Vector Graphics) is an image format that can scale to any size without increasing its file size. They can be modified through 
css and javascript. SVG images are defined through XML (Extensive Markup Language). 

XML:
-Human readable.
-Interoperable with HTML.
-In an HTML file, XML elements are targeteable.
-Not great for very detailed images.
-Adobe Ilustrator creates SVG.
-You can download an SVG and modify it a bit.

XML can be linked or inline in the HTML document.
Link: html --> <img> tag 
	  css ---> background-image: url(./my-image.svg)
	Note: the contents of the svg wont't be accessible from the page if it's linked (unless react or webpack).

Inline:

<svg xmlns = "http://www.w3.org/2000/svg" viewBox= "0 0 100 100">
	/*xmlns = xml namespace, indicates what specific xml format will be used*/
	/*viewBox defines the bounds of the svg. The points in the xml will refer to this coordinates. Also defines aspect ratio and origin*/ 
	<rect x=0 y=0 width=100 height=100 fill="burlywood"/> /*Defines a rectangle*/
	<path d="M 10 10 H 90 V 90 L 10 60" fill="transparent" stroke="black" stroke-width="3"> /*Defines a path*/
	<circle cx=50 cy=50 r=20> /*Defines a circle*/
	<g> /*Container for other svg elements*/
		<text x="20" y="25" rotate="10">Hello!</text> /*text*/
      	<use href="#hello-text" x="-10" y="65" fill="white"/> /*Duplicate another node*/
	</g>
</svg>

-Other grphic elements-
-ellipse
-image
-line
-polygon
-polyline
-...

------tables------
Headers --> Default: bold & centered


----------------------------------CSS VALUES & UNITS----------------------------------

--------VALUES-------
CSS expressions are composed by tuples of <property: value> and there are many value types. A value type is a collection of
allowable values.

--Colors--
Colors can be expressed by IDENTIFIERS (red, black, ...), by the rgb() function, the hexadecimal notation, etc.
-HSLA notation-
hsl(hue [0,360],saturation[0-100%], lightness[0-100%], transparency[0,1])

--Numbers, lengths, percentages--
-integer: whole numbers.
-number: decimal numbers.
-dimension: number with an unit attached to it. Dimension has some sub-categories:
	-length
	-angle
	-time
	-resolution
-percentage: represents a fraction of some other value. Example: an elements length is allways relativa to its parent's. (50%).

------Length Units------

--Absolute Units--
Absolute units are those that are allways the same in any context: [px], cm, mm, Q, in, ...

--Relative Units--
Units that change based on their context.

[]1em is the font size of an element. An 'em' unit inside an element is relative to the font-size of its parent (for length) and its own 
	(for typographical properties).
[]1rem is the font size of the root element (in general <html>).
[]1ex is the x-height of the element's font.

--Viewport Units---

1vh = 1% of the viweport height.
1vw = 1% of the viweport width.
1vmin = 1% of the viweport smallest dimension.
1vmax = 1% of the viweport larger dimension.

------Images------
The <image> value type is used wherever an image is a valid value.
-url("./image.png")
-linear-gradient()

------Position------
The <position> value type represents a ser of 2d coordinates. It is used to position an item (such as a background image using the 
background-position property). Values: (top|left|bottom|right|center|<length>)^2 <-- offsets in x and y


---------------------------------------ADVANCED SELECTORS---------------------------------------

-------- Parent and sibling combinators --------

> : child combinator
+ : adjacent sibling combinator
~ : general sibling combinator

.container > div : only selects direct div descendants of the container class.

<div class="container">
	<div> ---> selected
		<div> ---> not selected

.container > div > div: only selects nephew div descendants of the container class.

<div class="container">
	<div> ---> not selected
		<div> ---> selected

.container + div: only selects the elements on the same level that the ones that have a .container class. The element selected
				  is the next one that matches.

<div class = "container">
<div> ---> selected 
<div> ---> not selected

.container + div + div: only selects the elements on the same level that the ones that can be selected with (.container+div). 
						The element selected is the first one that matches.

<div class = "container">
<div> ---> not selected 
<div> ---> selected

.container ~ div: only selects the elements on the same level that the ones that have a .container class. It selects all the
				  elements that match.

<div class = "container">
<div> ---> selected 
<div> ---> selected


-------- Pseudo selectors --------

---- Pseudo classes ----

Pseudo classes offer different ways to target elements. They have the same specifity and can be chained like regular selectors.
A pseudo class is a keyword added to a selector that specifies a special state of the selected elements. There are many types 
of pseudo classes:

- Dynamic and user interaction
	:focus --> currently selected
	:hover --> mouse over it
	:active --> currently being clicked
	:link --> <a> tags with an href property
	:visited --> link already visited

- Structural -- position in relation to the DOM
	:root --> class that represents the top level of the document. Here go the global css rules and custom variables.
	:first-child // :last-child --> match the first or last sibling of the selector.
	:empty --> it has no childs
	:only-child --> only has one child
	:nth-child(7) --> is the 7-th child
		      (7n) --> is a 7th child 
		      (7n+3) --> specifies an offset
		      (even) --> selects even childs
    :first-of-type 
    :last-of-type
    :only-of-type
    :not(aSelector)


---- Pseudo Elements ----

Pseudo elements are more abstract than pseudo classes: they allow us to affect parts of the HTML that aren't elements at all.

::marker --> lets you give style to the bullets of a list independently of the list itself.
::first-letter --> lets you style the first letter.
::first-line -->  lets you style the first line.
::before // ::after --> lets you add extra elements to the page with css.
	
	Example:

	div::before{
		content: "Text before each div";
	}
	div::after{
		content: "Text after each div";
	}

	content value can be: 
		- a string.
		- an image: url(./path/to/image.jpg)
		- etc

::selection --> lets you style the selection (when you select text with te mouse, the background has a different style).

-------- Attribute selectors --------

[attribute]  --> selects each element with the given attribute.
selector[attribute] --> selects elements targeted by the selector with the given attribute.
[attribute = 'value'] --> selects each element with the given attribute/value pair.

[attribute ^= 'val'] --> selects each element with the given attribute/value pair, matches value from the start.
[attribute $= 'lue'] --> selects each element with the given attribute/value pair, matches value from the end.
[attribute *= 'alu'] --> selects each element with the given attribute/value pair, matches value in any part.




----------------------------------------FUNCTIONS----------------------------------------


CSS functional notation is a value type in css. Css doesn't allow to create our own functions.

- rgb(0, 42, 255)
- linear-gradient(90deg, blue, red); /*0deg -> top to bottom, 90deg -> left to right*/

- calc() --> simple calculations inside css. Ex: width: calc(20% + 100px); /* It can mix units */
		 --> function can be nested: calc( calc(...)+calc(...) )
		 --> inside a calc, we can use var(propertyName) to access a property value inside the rule

	Example:

	div{
		height:  10px;
		width:  calc(var(height) + 5px);
	}

- min(aLengthUnit, anotherLengthUnit) --> Dynamically finds the smallest viewport value between the two.
- max(a,b,c,d,...)

-clamp(smallestValue, idealValue, largestValue) = max(smallestValue, min(idealValue, largestValue))
	The idea is for idealValue to be dynamic, like 50%
	This can be used for dynamic container and font sizes, etc.


--------- Types of functions --------

- Transform functions: used in the 'transform' property.
- Math functions: allows css numeric values to be written as math expressions.
- Filter functions: represent graphical effects that can change an input image, used in 'filter'/'backdrop-filter'.
- Color functions: Specify different color representations. Used wherever a color is valid.
- Image functions: Used wherever an <Image> value type would be expected.
- Counter functions: Used with the 'content' property ???
- Font functions: 
- Shape functions: Used in place of a <basic-shape> data type.
- Reference functions: Used to reference a value defined elsewhere. 
- Grid functions: Used to define a CSS grid.


------------------------------ MEDIA QUERIES ---------------------------------------

Media queries are usefull when you want to modify your web page depending on the device and its characteristics. 
A media query is composed of an optional 'media type' and any number of 'media feature expressions'.

*Media types: define the category of the device (printer, screen, etc.).
*Media feature: describe a specific characteristic of the user agent, output device or enviroment.
*Logical operators: used to compose a complex media query (not, and, only);

A media query computes to true when the media type matches the device on which a document is being displayed and all media query
features compute as true.

Examples:

@media { ... }
@media print { ... }
@media all { ... }
@media screen, print { ... }

@media (hover:  hover){ ... } /*Applies if the primary input mechanism (mouse) can hover over elements*/
@media (max-width: 12345px){ ... } /*Applies if the browsers viewport is equal or narrower than 12345px*/


	(seguir en otro momento)


-------------------------- CUSTOM PROPERTIES -----------------------------------


CSS variables allow us to reference a CSS value through all the file. They can be used to avoid redundancy.

Declaration:

selector{
	--custom-property-name: custom-property-value;
}

Reference:

selector{
	var(--custom-property-name, fallback-value); /*fallback-value wil be used if there's a problem with the reference*/
}

The scope of a custom property is the same declaration block it has been declared plus all descendants of elements that use
that declaration block. This means that two elements can have the same class, whose block references a variable, but only
one of them is in the scope of the variable. In other words, custom properties do inherit like regular ones.

One way of creating global variables is declaring them inside a 
:root{ 
	--global-variable-name: red;
} 

Custom properties are not variables: they are computed at runtime depending on its context. Custom properties are statically valid 
but can be invalid at computed time.



